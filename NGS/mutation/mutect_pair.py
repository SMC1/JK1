#!/usr/bin/python

import sys, os, re, getopt
import mybasic

def main(tumorFileN, normalFileN, outPrefix, mem='6000m', cpu='1', genome='hg19', pbs=False):
	print 'Files for %s: %s, %s' % (outPrefix, tumorFileN, normalFileN)
	## command to make this file: b37_cosmic_v54_120711.vcf downloaded from muTect website,
	## awk 'OFS="\t" {if (substr($1, 1, 1)=="#") print $0; else print "chr"$0}' b37_cosmic_v54_120711.vcf > hg19_cosmic_v54_120711.vcf
	## or
	## using cosmic_confirmed_somatic_vxx.vcf generated by JK1/Integration/prepDB_cosmic_annotated.py
	## use fix_chr_cosmic.sh => produces cosmic_confirmed_somatic_vxx.hg19.vcf
	if genome == 'hg19':
		cosmic='/data1/Sequence/cosmic/hg19_cosmic_v54_120711.vcf'
		#cosmic='/data1/Sequence/cosmic/cosmic_confirmed_somatic_v63.hg19.vcf'
		dbsnp='/data1/Sequence/ucsc_hg19/annot/dbsnp_135.hg19.sort.vcf'
		ref='/data1/Sequence/ucsc_hg19/hg19.fasta'

	mem_opt = '-Xmx%s' % mem

	if pbs:
#		os.system('''echo "java %s -jar /home/tools/muTect/muTect.jar --analysis_type MuTect \
		sys.stdout.write('''echo "java %s -jar /home/tools/muTect/muTect.jar --analysis_type MuTect \
			--reference_sequence %s --cosmic %s --dbsnp %s --input_file:tumor \
			%s --input_file:normal %s --out %s.mutect --coverage_file %s.wig" | qsub -N mutect -o %s.mutect.log -l nodes=1:ppn=%s \
			''' % (mem_opt, ref, cosmic, dbsnp, tumorFileN, normalFileN, outPrefix, outPrefix, outPrefix, cpu ))
		sys.stdout.write('\n')
	else:
#		os.system('''java %s -jar /home/tools/muTect/muTect.jar --analysis_type MuTect \
		sys.stdout.write('''java %s -jar /home/tools/muTect/muTect.jar --analysis_type MuTect \
			--reference_sequence %s --cosmic %s --dbsnp %s --input_file:tumor \
			%s --input_file:normal %s --out %s.mutect --coverage_file %s.wig -nt %s > %s.mutect.log \
			''' % (mem_opt, ref, cosmic, dbsnp, tumorFileN, normalFileN, outPrefix, outPrefix, cpu, outPrefix))
		sys.stdout.write('\n')

optL, argL = getopt.getopt(sys.argv[1:],'t:n:o:g:m:c:',[])

optH = mybasic.parseParam(optL)

mem = ''
if '-m' in optH: ## in Mb
	mem = optH['-m']

cpu = ''
if '-c' in optH:
	cpu = optH['-c']

if '-g' in optH:
	main(optH['-t'], optH['-n'], optH['-o'], mem, cpu, optH['-g'], True)
else:
	main(optH['-t'], optH['-n'], optH['-o'], mem, cpu, pbs=True)

#main('/pipeline/test_ini_gsnap2sam/S022_single.dedup.rg.ra.rc.bam', '/pipeline/test_ini_gsnap2sam/aln/S022_Rsq.dedup.rg.ra.rc.bam', 'test', 50, 4)

