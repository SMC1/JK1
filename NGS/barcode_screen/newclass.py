#!/usr/bin/python

import os,re

#sample dictionary 생성
#sample은 length 6의 barcode중 앞 3개 nucleotide를 key로 하여 sample name을 할당한 것
#sample2는 뒤의 3개 nucleotide를 key로 하여 sample name을 할당한 것
sample={'CGT':'464Ctrl','GCC':'464_2','TGG':'464_4','CAC':'827_4','ATT':'464_6','GAT':'827_1','TCA':'827Ctrl','CTG':'827_2','AAG':'827_3','GTA':'827_6','TAC':'827_5'}
sample2={'GAT':'464Ctrl','TAA':'464_2','TCA':'464_4','TGT':'827_4','GGC':'464_6','CTG':'827_1','AGT':'827Ctrl','ATC':'827_2','CTA':'827_3','GCC':'827_6','AAG':'827_5'}
#sample={'CGTGAT':'464Ctrl','GCCTAA':'464_2','TGGTCA':'464_4','CACTGT':'827_4','ATTGGC':'464_6','GATCTG':'827_1','TCAAGT':'827Ctrl','CTGATC':'827_2','AAGCTA':'827_3','GTAGCC':'827_6','TACAAG':'827_5'}

#gene의 이름을 나열한 'genename' list 형성. 차후에 gene sequence에 gene의 이름을 할당한 dictionary를 생성하기 위해 필요
genename=['ACADSB-1','ACADSB-2','ACADSB-3','ACADSB-4','ACADSB-5','ACADSB-6','ACADSB-7','AKT3-1','AKT3-2','AKT3-3','AKT3-4','AKT3-5','AKT3-6','AKT3-9','AKT3-10','AQP1-1','AQP1-2','AQP1-3','AQP1-4','AQP1-6','FAM188A-1','FAM188A-2','FAM188A-3','FAM188A-4','FAM188A-5','CCDC6-1','CCDC6-5','CCDC6-6','CCDC6-7','CCDC6-8','CDKN2B-1','CDKN2B-2','CDKN2B-3','CDKN2B-4','CDKN2B-5','CDKN2B-6','CDKN2B-7','COX15-1','COX15-2','COX15-3','COX15-5','COX15-6','COX15-7','CPEB3-1','CPEB3-2','CPEB3-4','CPEB3-5','CPEB3-6','CPEB3-7','CUL2-1','CUL2-2','CUL2-3','CUL2-4','CUL2-5','CUL2-6','CUL2-7','CUL2-8','CUL2-9','CYP2E1-1','CYP2E1-2','CYP2E1-3','CYP2E1-4','CYP2E1-5','CYP2E1-6','CYP2E1-7','DDX50-1','DDX50-2','DDX50-3','DDX50-4','DDX50-5','DDX50-6','DDX50-7','DDX50-8','DDX50-9','DDX50-10','FAM13C-1','FAM13C-2','FAM13C-3','FAM13C-4','FAM13C-5','FAM13C-6','MAPK8-1','MAPK8-2','MAPK8-4','MAPK8-5','MAPK8-6','MAPK8-7','MAPK8-8','MAPK8-9','MAPK8-10','MXl-1','MXl-2','MXl-3','MXl-4','MXl-5','MXl-6','MXl-7','MXl-8','NLK-1','NLK-2','NLK-3','NLK-4','NLK-5','PDCD4-1','PDCD4-2','PDCD4-3','PDCD4-4','PDCD4-5','PDCD4-6','PDCD4-7','PIP4K2A-1','PIP4K2A-2','PIP4K2A-3','PIP4K2A-5','PIP4K2A-6','PIP4K2A-7','PIP4K2A-8','PIP4K2A-9','PRKCQ-1','PRKCQ-2','PRKCQ-3','PRKCQ-4','PRKCQ-5','PRKCQ-6','PRKCQ-7','PRKCQ-8','PTEN-1','PTEN-2','PTEN-3','PTEN-4','PTEN-5','PTEN-6','PTEN-7','PTEN-8','PTEN-9','PTEN-10','PTEN-11','PTEN-12','SGMS1-1','SGMS1-2','SGMS1-4','SGMS1-5','SGMS1-6','SGMS1-7','SGMS1-8','SGMS1-9','SIAH1-1','SIAH1-2','SIAH1-3','SIAH1-4','SIAH1-5','SIAH1-6','SIAH1-7','SIAH1-10','VRK3-1','VRK3-2','VRK3-3','VRK3-4','VRK3-5','VRK3-6','VRK3-7','VRK3-8','VRK3-9','VRK3-14','CISD1-1','CISD1-2','CISD1-3','CISD1-4','CISD1-5','CISD1-6','CISD1-7']

#first10=['TTGAGGACAT','TAATCTCCCT','ATTTGTCCCA','TCTACCTTCA','TGTATGTTAG','TGAGTAGAGC','AGTGTAGTCA','TTCTTCAGAA','TGAGGTTTCT','ATAAATGTGT','TATCTTCTAA','CATCCTTTGC','ATTGTAATAG','TATTGTAATA','ATAACAGTAG','TCTTCTTGAA','TCTATTTGGG','ATAATGAAAT','TGTGTGTGAT','TGTCCTGGAC','TCGTGCTTCA','TCTTCACAGA','TCCTCGGTAT','TCAAGGAAAA','TGCTGAACCA','TGTAATAAGA','TCTGGAGAAT','CGTCGTCCAT','TCAAGGTCAA','TCAGCTTCAA','AAACTTAACG','TGTATGGAAG','ATGTATGGAA','AAATCCCAAA','AGTCTGACCT','TTAGCATCTG','TTTAGCATCT','TAAAGAACCA','TAAATTCTGG','TCTAGTCCAC','TTTTCTTCTA','AAGGAACACC','TTAAATTCTG','TATATTACTA','TAGGTCATTC','AGAGTAGCGT','ATAACATTAA','TCCATCTGCA','TTGAAAACAA','TTACAACTGA','GAACAAAGGA','TTTACAACTG','AATTCAAACA','TAAACCTAGC','TATTGTTGAG','AGTATATGAA','TGACATTCAT','TCTGCATCAA','ATTGTAAAGC','TATGTATAGG','ATTATTGTAA','TCATGGAGCT','ATTCTTCAAT','ACAGCGTGAA','TGAAATAGTC','TTATGTGTGG','TAGGACTCAA','AAGTTCTTTC','TATATCTTTG','TTAGAAAGAT','ACCATCTTGT','TCAGTTACAT','TTAGATTTAA','TTTCCAACAA','ATCTTTGAAG','AAATTAGACA','AAACTTTCCC','TCTTGGTTGA','ATGAGGTTCT','TGTCTTGCTT','TTATTGTTTT','TTCTCAAAGC','TCATCTAACT','TATTACTGGG','TAGATGCATC','TCTTCTAGGG','TTGGATAACA','TTAGATGCAT','TTAGGTCTGT','TCATGATCTA','TAAATACAGG','AAATAGTTGA','AACAATAGCA','TGAGCTGCAT','TCTCCATCGA','TTGTTTTCTT','TGATGTGCTT','AAGAGTAACA','ATAGCATTGC','ATATCCAGCT','AAAACATGTG','TACTGAGTAA','TATCCAATAG','TAGACATACT','AATTCTAACA','TTGTAACTAT','TCATAAACAC','ATCTTTACGC','TTCATTGTAA','TCTTCTACAA','TTGAATAGGC','TTCCTATACA','TAAACTTGAA','ATCTTTTGTC','AGTCCATGAG','ACATTTCTTG','TTCTTTGTCA','TCCTATACAC','TCTCCTTCCG','TCTTTAAGGC','TTATGCCACA','TTCTGGATAT','ATTCGTCTTG','TTATCAATAC','ATAACTTTAT','ACACTTCTTG','TCCTGTACAC','TAAGTGGAGT','TGGAGGAATA','TAATAATACA','AATGTTTGGA','ATACACATCA','AAATATAAAT','TATTCCTTGT','TATATCTTCA','GAACTTGTCT','ACATGAACTT','ATATCTTCAC','TGAAAGATAA','TATGGCATCT','ATGTGTCATT','TTAACTTGCC','TAATCTTGAT','ACAATTCCTT','TGGGTTTAAT','TATGTGTCAT','TACAAATACT','TTCTCTAAGA','AAACTCACAG','TCCTTCATGA','CAAAGACTAG','CAATCGTCGC','AGTGTTACTA','TTCACATCCA','TCTGTGATTA','TGCTAATGAA','TGTTCTAGAA','ACTTCTGCAG','TTGAGTGAGA','TATCTGTGAT','TTGTCCTGGT','ACAGCTTCTT','ATCTTCAGAC','TGTCTGTCAG','TTATCATAGC','ATTCTAATTA','TAAACAATCA','TTAACATAAA','TTGTCTCCAG','ATCTTGGGGT','TATCATAGCT']

#last10=['TAATAATCTC','TCTTTATCAG','AAGATATTGG','ATTGAGACTC','GTAATCTTGC','CTTCTGACTG','AAAACATCCT','ATCTTCATAG','TCTTTATATC','TTTGGCTTTG','ACACCTCTGG','CAATAATGAC','GTCTGAGCTG','AGTCTGAGCT','GTCCACTGGA','ACTCGCTGGC','GCTTCATCTC','TTCCAACTCC','TCACCGCGGA','CCGCCGTCTG','AGCTTCTGTG','ACCAGAAGTC','TCGTCCACCA','ATAAGGTGCT','AGTCGCAGCT','ACATTCCAGC','TCAATCTCCA','TTTCTAAGCT','ATCTTCTCCC','AGCTTATCCA','GACACTCTTC','GGTTATTCCC','AGGTTATTCC','AGCAGTGCAC','TCTGCACCCT','GTCGTCGCTT','TGTCGTCGCT','AGGGCTGATC','GAAATTGCTG','CTTTTCACCA','AGTCCACTTT','CAGACCTGCT','GGAAATTGCT','ATCTGCAGCC','CTGTTATGGG','TTCTACTCGT','ACAACTTGGG','ATCTTGTCCG','AACTATAGCT','ACGTAAGGGC','AGTTAATAAC','GACGTAAGGG','ATCTGTACAC','CTCTTGACTG','GATCAGCGCT','ACTTGGATGT','TGAATCACCT','ATATCTTCCT','CTGGAGCCAG','GGCTGAGGTC','AAGCTGGAGC','TTCTCTTCGA','TTCCAACTGG','ACACCGGCCC','CACTGTACTT','GATTCATGGC','ACATCCTGAG','CCAAGCACAG','GAAGTCTTTG','TCCAATCGGC','TCGACTTCCT','TTCTTCTTGG','ACTAAATCCA','AGGTCAACCT','GTCTTTGGCT','ATGGAGAGAG','CTAACAAGTG','AAGTCGCACT','TTGTCTTGCT','TAGTTACCCG','TCATCTCTGA','CTATATCCAG','TGCTTGTCAG','GCTTTAAGTC','CTATTACCAG','GATTTCTGTG','AAATCCCTTG','TCTATTACCA','TTTTCAACGT','AGCTCCATCT','GTCCTCTGAC','ATCCAATGCT','ACCTGCACAG','TGATGATCCC','AGTTCTCGCT','TTCTCGATCT','TCTCCATCGA','AATAGCACCT','CTGTAATGAC','TGCTGCTGTG','GCAACTCTGG','ACAACTTCCT','GGTCTATCCG','TCAGAAGCAC','AGACTATATC','TCAATATAGG','CAGTTCTCCT','CTTTCCACCT','AATTCTCTCA','AACCGCTCCA','CTTTGAAGTC','ACAGACAAAC','AATGGCTCGG','CGTAGGAAGT','GCTTCAGCTG','GTAACTATCA','ACTAGCTTCT','CAGACAAACG','GTTCAAGTTC','CCTTTATTGC','AAAGGTTGGC','TACATCTGCC','GGCATCTCCT','CACTTCTTGT','TCAATACACT','GTGAATTGCT','CATCATATTG','TTTATAACAC','ATATCTTCAC','ACATAGCGCC','ATAAATATAG','AGTCTGTCTC','TGTGTAAATC','TCATTATCTG','ACCTTTAGCT','TTCCCGTCGT','TGTCTTCCCG','CCTTTAGCTG','ATAGGATTAG','TTCTCTCATG','TCACCAGCCG','CTACTGAGGT','TGCTGAAGCT','TGGACATTCT','TCTTGATGCT','TTCACCAGCC','TGTGCATGAC','ACTAACATGA','GAGCTCTTCA','AATAGATCGA','GACAGTCGCT','CCTATGACCA','ACATGCAACT','AGAAGACGCA','AAACAGCAGG','ACTCAAGGTC','AGCTTATCTG','GGGTCTCTGA','AACTTTTGCT','TTAAACAGCA','TGAACACCGA','TCCACTTGTT','CTCAGAACTG','GCACTGTCCC','CTTTATTTCG','AAACAATCAG','AGGTAACTTC','AATCTTTTGT','GTCTCTTCGT','TTGTCTTTCT','TTTATTTCGA']

#last8=['ATAATCTC','TTTATCAG','GATATTGG','TGAGACTC','AATCTTGC','TCTGACTG','AACATCCT','CTTCATAG','TTTATATC','TGGCTTTG','ACCTCTGG','ATAATGAC','CTGAGCTG','TCTGAGCT','CCACTGGA','TCGCTGGC','TTCATCTC','CCAACTCC','ACCGCGGA','GCCGTCTG','CTTCTGTG','CAGAAGTC','GTCCACCA','AAGGTGCT','TCGCAGCT','ATTCCAGC','AATCTCCA','TCTAAGCT','CTTCTCCC','CTTATCCA','CACTCTTC','TTATTCCC','GTTATTCC','CAGTGCAC','TGCACCCT','CGTCGCTT','TCGTCGCT','GGCTGATC','AATTGCTG','TTTCACCA','TCCACTTT','GACCTGCT','AAATTGCT','CTGCAGCC','GTTATGGG','CTACTCGT','AACTTGGG','CTTGTCCG','CTATAGCT','GTAAGGGC','TTAATAAC','CGTAAGGG','CTGTACAC','CTTGACTG','TCAGCGCT','TTGGATGT','AATCACCT','ATCTTCCT','GGAGCCAG','CTGAGGTC','GCTGGAGC','CTCTTCGA','CCAACTGG','ACCGGCCC','CTGTACTT','TTCATGGC','ATCCTGAG','AAGCACAG','AGTCTTTG','CAATCGGC','GACTTCCT','CTTCTTGG','TAAATCCA','GTCAACCT','CTTTGGCT','GGAGAGAG','AACAAGTG','GTCGCACT','GTCTTGCT','GTTACCCG','ATCTCTGA','ATATCCAG','CTTGTCAG','TTTAAGTC','ATTACCAG','TTTCTGTG','ATCCCTTG','TATTACCA','TTCAACGT','CTCCATCT','CCTCTGAC','CCAATGCT','CTGCACAG','ATGATCCC','TTCTCGCT','CTCGATCT','TCCATCGA','TAGCACCT','GTAATGAC','CTGCTGTG','AACTCTGG','AACTTCCT','TCTATCCG','AGAAGCAC','ACTATATC','AATATAGG','GTTCTCCT','TTCCACCT','TTCTCTCA','CCGCTCCA','TTGAAGTC','AGACAAAC','TGGCTCGG','TAGGAAGT','TTCAGCTG','AACTATCA','TAGCTTCT','GACAAACG','TCAAGTTC','TTTATTGC','AGGTTGGC','CATCTGCC','CATCTCCT','CTTCTTGT','AATACACT','GAATTGCT','TCATATTG','TATAACAC','ATCTTCAC','ATAGCGCC','AAATATAG','TCTGTCTC','TGTAAATC','ATTATCTG','CTTTAGCT','CCCGTCGT','TCTTCCCG','TTTAGCTG','AGGATTAG','CTCTCATG','ACCAGCCG','ACTGAGGT','CTGAAGCT','GACATTCT','TTGATGCT','CACCAGCC','TGCATGAC','TAACATGA','GCTCTTCA','TAGATCGA','CAGTCGCT','TATGACCA','ATGCAACT','AAGACGCA','ACAGCAGG','TCAAGGTC','CTTATCTG','GTCTCTGA','CTTTTGCT','AAACAGCA','AACACCGA','CACTTGTT','CAGAACTG','ACTGTCCC','TTATTTCG','ACAATCAG','GTAACTTC','TCTTTTGT','CTCTTCGT','GTCTTTCT','TATTTCGA']

#matching을 찾으려고 하는 antisense shRNA의 sequence(총 길이 19)중 서로 구별하는데 필요한 최소의 길이 8의 sequence들을 위 'genename'list 와 동일한 순서로 나열한 list 
first8=['TTGAGGAC','TAATCTCC','ATTTGTCC','TCTACCTT','TGTATGTT','TGAGTAGA','AGTGTAGT','TTCTTCAG','TGAGGTTT','ATAAATGT','TATCTTCT','CATCCTTT','ATTGTAAT','TATTGTAA','ATAACAGT','TCTTCTTG','TCTATTTG','ATAATGAA','TGTGTGTG','TGTCCTGG','TCGTGCTT','TCTTCACA','TCCTCGGT','TCAAGGAA','TGCTGAAC','TGTAATAA','TCTGGAGA','CGTCGTCC','TCAAGGTC','TCAGCTTC','AAACTTAA','TGTATGGA','ATGTATGG','AAATCCCA','AGTCTGAC','TTAGCATC','TTTAGCAT','TAAAGAAC','TAAATTCT','TCTAGTCC','TTTTCTTC','AAGGAACA','TTAAATTC','TATATTAC','TAGGTCAT','AGAGTAGC','ATAACATT','TCCATCTG','TTGAAAAC','TTACAACT','GAACAAAG','TTTACAAC','AATTCAAA','TAAACCTA','TATTGTTG','AGTATATG','TGACATTC','TCTGCATC','ATTGTAAA','TATGTATA','ATTATTGT','TCATGGAG','ATTCTTCA','ACAGCGTG','TGAAATAG','TTATGTGT','TAGGACTC','AAGTTCTT','TATATCTT','TTAGAAAG','ACCATCTT','TCAGTTAC','TTAGATTT','TTTCCAAC','ATCTTTGA','AAATTAGA','AAACTTTC','TCTTGGTT','ATGAGGTT','TGTCTTGC','TTATTGTT','TTCTCAAA','TCATCTAA','TATTACTG','TAGATGCA','TCTTCTAG','TTGGATAA','TTAGATGC','TTAGGTCT','TCATGATC','TAAATACA','AAATAGTT','AACAATAG','TGAGCTGC','TCTCCATC','TTGTTTTC','TGATGTGC','AAGAGTAA','ATAGCATT','ATATCCAG','AAAACATG','TACTGAGT','TATCCAAT','TAGACATA','AATTCTAA','TTGTAACT','TCATAAAC','ATCTTTAC','TTCATTGT','TCTTCTAC','TTGAATAG','TTCCTATA','TAAACTTG','ATCTTTTG','AGTCCATG','ACATTTCT','TTCTTTGT','TCCTATAC','TCTCCTTC','TCTTTAAG','TTATGCCA','TTCTGGAT','ATTCGTCT','TTATCAAT','ATAACTTT','ACACTTCT','TCCTGTAC','TAAGTGGA','TGGAGGAA','TAATAATA','AATGTTTG','ATACACAT','AAATATAA','TATTCCTT','TATATCTT','GAACTTGT','ACATGAAC','ATATCTTC','TGAAAGAT','TATGGCAT','ATGTGTCA','TTAACTTG','TAATCTTG','ACAATTCC','TGGGTTTA','TATGTGTC','TACAAATA','TTCTCTAA','AAACTCAC','TCCTTCAT','CAAAGACT','CAATCGTC','AGTGTTAC','TTCACATC','TCTGTGAT','TGCTAATG','TGTTCTAG','ACTTCTGC','TTGAGTGA','TATCTGTG','TTGTCCTG','ACAGCTTC','ATCTTCAG','TGTCTGTC','TTATCATA','ATTCTAAT','TAAACAAT','TTAACATA','TTGTCTCC','ATCTTGGG','TATCATAG'] 

#gene dictionary 생성
#genename들을 key로 하여 길이 8의 sequence를 할당한 것
gene={}
for i in range(0,171,1):
	tempdict={first8[i]:genename[i]}
	gene.update(tempdict)

#앞부분 길이 8의 sequence가 동일한 DDX50-4와 PTEN-9를 구별하기 위한 dictionary
extragene={'AGTCTTTG':'DDX50-4','CTTTAGCT':'PTEN-9'}

#sample의 이름을 나열한 list 'namelist'생성
#최종 output dictionary인 'data'를 생성하기 위한 것
namelist=['464Ctrl','464_2','464_4','464_6','827Ctrl','827_1','827_2','827_3','827_4','827_5','827_6']

#'data'생성
#key로 namelist의 sample name 사용
#각 sample name에 gene별 count를 위한 새로운 dictionary 할당
data={}
for names in namelist:
	tempdict2={names:{}}
	data.update(tempdict2)
	for i in range(0,171,1):
		tempdict3={genename[i]:0}
		data[names].update(tempdict3)

#파일 stream 형태로 open
f=os.popen('cat ./464_827_Pool_1T_Barcode_*.fastq','r')

#pattern 을 re 패키지의 compile함수를 이용하여 생성
pattern=re.compile('([ACTGN]{3})([ACTGN]{3})ACAT[ATCGN]{15}([ATCGN]{8})[ATCGN]{3}([ATCGN]{8})[ATCGN]{57}')

count=0
iter=0
success=0
for line in f:
	count+=1
	if count%4==2:
		iter+=1
		match=re.match(pattern,line)
		if match!=None and gene.has_key(match.group(3)):
			if sample.has_key(match.group(1)):
				if match.group(3)!='TATATCTT':
					success+=1
					data[sample[match.group(1)]][gene[match.group(3)]]+=1
				elif extragene.has_key(match.group(4)):
					success+=1
					data[sample[match.group(1)]][extragene[match.group(4)]]+=1
			elif sample2.has_key(match.group(2)):
				if match.group(3)!='TATATCTT':
					success+=1
					data[sample2[match.group(2)]][gene[match.group(3)]]+=1
				elif extragene.has_key(match.group(4)):
					success+=1
					data[sample2[match.group(2)]][extragene[match.group(4)]]+=1
f.close()

resultfile=open('resultfile.txt','w')

for sampleN in data:
        for geneN in data[sampleN]:
                resultfile.write('%s\t%s\t%s\n'%(sampleN,geneN,data[sampleN][geneN]))

resultfile.close()

#전체 데이터에 대한 gene matching 성공 비율 산출 
rate=float(success)/iter*2

print rate

